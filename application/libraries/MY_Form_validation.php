<?php
if (!defined("BASEPATH")) exit("No direct script access allowed");

class MY_Form_validation extends CI_Form_validation
{
	private bool $_valid = false;
	private array $_failed_rules = [];

	function __construct($rules = array())
	{
		parent::__construct($rules);
	}

	// --------------------------------------------------------------------
	// Method 확장
	// --------------------------------------------------------------------

	public function addMethod($name, $regexp)
	{
		$this->$name = Closure::bind(function($value, $param = false) use($regexp, $name) {
			log_message('debug', "Validating Custom Method : $name");
			$this->set_message($name, 'The value is not a valid.');
			$regexp = '/'.$regexp['exp'].'/'.$regexp['flags'];
			return $this->_valid = (bool)preg_match($regexp, $value, $matches);
		}, $this, get_class($this));
	}

	// 메서드 호출 처리
	public function __call($name, $arguments)
	{
		if (isset($this->$name) && is_callable($this->$name)) {
			// 동적 메서드를 호출
			call_user_func_array($this->$name, $arguments);
			return $this->_valid;
		}
		throw new Exception("Method $name does not exist.");
	}

	public function build_error_msg($line, $field = '', $param = '')
	{
		$line = $this->_build_error_msg($line, $field, $param);
		return $this->CI->josa->__conv($line);
	}

	protected function _build_error_msg($line, $field = '', $param = '')
	{
		return parent::_build_error_msg($line, lang($field), $param);
	}

	public function error_array(): array
	{
		$errors = [];
		foreach ($this->_error_array as $field => $message) {
			$errors[] = [
				'field' => $field,
				'value' => $this->_field_data[$field]['postdata'],
				'rule' => $this->_failed_rules[$field],
				'message' => $this->CI->josa->__conv($message),
			];
		}
		return $errors;
	}

	public function get_error_msg($rule, $field = '', $param = '', $user_errors = [])
	{
		$msg = '';
		if(element("form_validation_$rule", $this->CI->lang->language)){
			$field = str_replace('lang:', '', $field);
			$line = element($rule, $user_errors)?:lang("form_validation_$rule");
			if(array_key_exists($rule, $this->CI->config->item('file_rules'))) {
				$param = explode('|', $param)[0];
			}
			$msg = $this->build_error_msg($line, lang($field), $param);
		}
		return $msg;
	}


	// --------------------------------------------------------------------
	// CI_Form_validation Override
	// --------------------------------------------------------------------

	protected function _execute($row, $rules, $postdata = NULL, $cycles = 0)
	{
		$result = parent::_execute($row, $rules, $postdata, $cycles);
		foreach ($rules as $rule) {
			if(! method_exists($this, $rule) ) {
				log_message('debug', "Try Custom Method: {$rule} ");
				if (isset($this->$rule) && is_callable($this->$rule)) {
					$result = $this->$rule($postdata, $param = false);
					$this->_field_data[$row['field']]['postdata'] = is_bool($result) ? $postdata : $result;
					if($result) unset($this->_error_array[$row['field']]);
				}else{
					log_message('debug', "Unable to find validation custom rule: {$rule} ");
					return;
				}
			}
		}
		return $result;
	}

	protected function _get_error_message($rule, $field)
	{
		$this->_failed_rules[$field] = $rule;
		return parent::_get_error_message($rule, $field); // TODO: Change the autogenerated stub
	}

	public function error($field, $prefix = '', $suffix = '')
	{
		return $this->CI->josa->__conv(parent::error($field, $prefix, $suffix));
	}

	public function error_string($prefix = '', $suffix = '')
	{
		return $this->CI->josa->__conv(parent::error_string($prefix, $suffix));
	}

	// --------------------------------------------------------------------
	// Custom Rules
	// --------------------------------------------------------------------

	public function strong_password($value, $params)
	{
		$num = preg_match("/[0-9]/u", $value);
		$eng = preg_match("/[a-zA-Z]/u", $value);
//        $spe = preg_match("/[\!\@\#\$\%\^\&\*\(\)]/u",$value);

		//-- 공백안됨.
		if(preg_match("/\s/u", $value) == true) {
			$this->set_message('strong_password', lang("form_validation_strong_password_space"));
			return false;
		}

//        if( trim((string)$num) == "0" || trim((string)$eng) == "0" || trim((string)$spe) == "0" ) {
		if( trim((string)$num) == "0" || trim((string)$eng) == "0" ) {
			if (trim((string)$num) == "0") $this->set_message('strong_password', lang("form_validation_strong_password_num"));
			if (trim((string)$eng) == "0") $this->set_message('strong_password', lang("form_validation_strong_password_eng"));
			return false;
		}

		return true;
	}

	/**
	 * required_if
	 *
	 * @access public
	 * @param string $value
	 * @param string $field
	 * @return bool
	 */
	function required_if($value, $params)
	{
		$this->set_message('required_if', lang('con_the').' '.'%s'.' '.lang('not_field_required'));
		if ( ! is_array($value))
		{
			return (trim($value) == '') ? FALSE : TRUE;
		}
		else
		{
			return ( ! empty($value));
		}
	}

	public function check_conditions($value, $params)
	{
		$this->CI->load->database();

		$this->set_message('check_conditions', lang("Sorry, that %s is already being added."));

		list($tableInfo, $columns, $values) = explode("|", $params);
		$tableInfo 	= explode('.', $tableInfo);
		$columns 	= explode('.', $columns);
		$values 	= explode('.', $values);
		$conditions = array($tableInfo[1] => $value);
		if(sizeof($columns)> 0) {
			foreach($columns as $key => $column) {
				if(isset($values[$key])) {
					$conditions[$column] = $values[$key];
				}
			}
		}
		$query = $this->CI->db->select()->get_where($tableInfo[0], $conditions);

		if($query->row()) {
			return false;
		} else {
			return true;
		}
	}

	public function edit_unique($value, $params)
	{
		$this->CI->load->database();

		$this->set_message('edit_unique', lang("Sorry, that %s is already being added."));

		list($table, $field, $current_id) = explode(".", $params);

		$query = $this->CI->db->select()->from($table)->where($field, $value)->limit(1)->get();

		if($query->row() && $query->row()->id != $current_id) {
			return false;
		} else {
			return true;
		}
	}

	public function required_mod($value, $params)
	{
		$modes = explode('|', $params);
		if( in_array($this->CI->input->get_post('_mode'), $modes) ) {
			return is_array($value) ? (bool) count($value) : (trim($value) !== '');
		}else{
			return true;
		}
	}

	public function required_if_empty_data($value, $params)
	{
		list($table, $field, $identifier) = explode(".", $params);

		if($this->CI->input->get_post('_mode') === 'add') {
			return !is_empty($value);
		}else{
			$query = $this->CI->db
				->where($identifier, $this->_field_data[$identifier]['postdata'])
				->get($table)->row();
			return !(is_empty($query, $field) && is_empty($value));
		}
	}

	public function required_if_empty_file($value, $params, $data = null)
	{
		$CI =& get_instance();
		$exploded = explode('|', $params);
		$name = $exploded[0];
		list($table, $field, $identifier) = explode(".", $exploded[1]);

		if($this->CI->input->get_post('_mode') === 'add') {
			return is_file_posted($name);
		}else{
			if(empty($this->_field_data)) {
				$field_data = $data ?? $CI->input->post();
				$id = $field_data[$identifier];
			}else{
				$field_data =$this->_field_data;
				$id = $field_data[$identifier]['postdata'];
			}
			$query = $this->CI->db
				->where($identifier, $id)
				->get($table)->row();
			return (is_null($query) || is_empty($query, $field)) && is_file_posted($field);
		}
	}

	public function is_numeric($value, $params): bool
	{
		return is_numeric($value);
	}

	public function is_unique($value, $params)
	{
		if(!isset($this->CI->db)) return false;

		sscanf($params, '%[^.].%[^.].%[^.]', $table, $field, $key);
		if($key && isset($this->_field_data[$key], $this->_field_data[$key]['postdata'])) {
			$this->CI->db->where_not_in($key, [$this->_field_data[$key]['postdata']]);
		}

		return $this->CI->db->limit(1)->get_where($table, array($field => $value))->num_rows() === 0;
	}

	public function valid_youtube($value, $params)
	{
		if(!$value) return true;
		$this->set_message('required_mod', lang("form_validation_valid_youtube"));
		$this->CI->load->library('youtube');
		$this->CI->youtube->set($value);
		return $this->CI->youtube->valid();
	}

	public function max_files($value, $params)
	{
		$exploded = explode('|', $params);
		$max = $exploded[0];
		$name = $value;
		list($table, $field, $identifier) = explode(".", $exploded[1]);

		if($this->CI->input->get_post('_mode') === 'add') {
			return is_file_posted($name);
		}else{
			$query = $this->CI->db
				->where($identifier, $this->_field_data[$identifier]['postdata'])
				->count_all_results($table);
			return (int)$query < (int)$max;
		}
	}

	public function do_nothing($value, $params)
	{
		return true;
	}

	public function password_matches($value, $param)
	{
		if($this->CI->input->get_post('_mode') === 'add') {
			return $this->matches($value, $param);
		}else{
			if(isset($value, $this->_field_data[$param], $this->_field_data[$param]['postdata'])) {
				return $this->matches($value, $param);
			}else{
				return true;
			}
		}
	}
}
